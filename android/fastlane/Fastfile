# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.66.2"

default_platform :android
# Import ViroRenderer's fastfile

platform :android do
  before_all do
    #ENV["SLACK_URL"] = "***REMOVED***"
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    BUILD_INTERMEDIATES = "/var/tmp/build_intermediates/"
    GIT_REPO_BRANCH = "viro-media-app/master"
    S3_BASE_URL = "https://s3-us-west-2.amazonaws.com/viro-builds/"
  end


  def on_error(exception)
       slack(
           message: ":thunder_cloud_and_rain: Build Pipeline failed!",
           success: false,
           default_payloads: [], #Pass an empty array to suppress all the default payloads.
           payload: {
            "Git Repository:" =>  GIT_REPO_BRANCH,
            "Fastlane Lane:" => ENV["FASTLANE_LANE_NAME"],
            "Detailed Logs:" => "<https://virobuilds.ngrok.io/blue/organizations/jenkins/viro-media-app/activity/|Test Bed App Pipeline>",
            "Exception:" => "```#{exception}```"
           },
           use_webhook_configured_username_and_icon: true
       )
  end

  lane :save_git_log do
    begin
      sh("echo \"\n\n#{GIT_REPO_BRANCH}\n\" >> #{BUILD_INTERMEDIATES}s3_artifacts/git_log.txt")
      sh("git log master --no-walk >> #{BUILD_INTERMEDIATES}s3_artifacts/git_log.txt")
    rescue => exception
           on_error(exception)
    end
  end

  lane :clean_app do
    gradle(task:"clean")
  end

  lane :gvr_release do
    begin
      gradle(task:"assembleGvrRelease")
      sh("cp ../app/build/outputs/apk/gvr/release/app-gvr-release.apk #{BUILD_INTERMEDIATES}s3_artifacts/test-bed-app-gvr-release.apk")
    rescue => exception
      on_error(exception)
    end
  end
  
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
