# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.66.2"
#import "../../../react-viro/Examples/ios/fastlane/Fastfile"

default_platform :ios
platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"    # carthage
  end

def on_error(exception)
       slack(
           message: ":thunder_cloud_and_rain: Build Pipeline failed!",
           success: false,
           default_payloads: [], #Pass an empty array to suppress all the default payloads.
           payload: {
            "Git Repository:" =>  "viro-media-app/master",
            "Fastlane Lane:" => ENV["FASTLANE_LANE_NAME"],
            "Detailed Logs:" => "<https://virobuilds.ngrok.io/blue/organizations/jenkins/react-viro/activity/|Test Bed App Pipeline>",
            "Exception:" => "```#{exception}```"
           },
           use_webhook_configured_username_and_icon: true
       )
  end
  desc "Build test bed app"
  lane :ios_release do
    sh("pod install")
    begin
        increment_build_number(
        build_number: latest_testflight_build_number + 1,
        xcodeproj: "./ViroMediaApp.xcodeproj"
      )
      cert
      sigh(force: true)
      gym(scheme: "ViroMediaApp",
                workspace: "./ViroMediaApp.xcworkspace",
                configuration: "Release",
                clean: true,
                output_directory: "./build",
                output_name: "ViroMediaApp.ipa") 
#       pilot(username: "manish@viromedia.com",
#             ipa: "./build/ViroMediaApp.ipa",
#             skip_waiting_for_build_processing: true)
    rescue => exception
           on_error(exception)
    end

    rescue => exception
           on_error(exception)
    end
  end
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
